<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
  <artifactId>HelloServletProject</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>
  <dependencies>
        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <version>6.0.0</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <finalName>HelloServletProject</finalName>
    </build>
</project>
<!-- 
### Root Element `<project>`

The `<project>` element is the root of the Maven POM (Project Object Model) file. It defines the configuration for a Maven project.

#### Attributes:

-xmlns: The XML namespace for Maven POM.
  - `http://maven.apache.org/POM/4.0.0`: This is the namespace URL for the Maven POM schema.

-xmlns:xsi: The XML Schema instance namespace.
  - `http://www.w3.org/2001/XMLSchema-instance`: This is the namespace URL for the XML Schema instance.

-xsi:schemaLocation: This provides hints for validating the document against an XML Schema.
  - `http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd`: This indicates the namespace and the location of the XML Schema file used for validation.

### Child Elements

#### `<modelVersion>`

Specifies the model version of the POM.
- `4.0.0`: This is the version of the POM model being used, which is the most common version.

#### `<groupId>`

Defines the group ID for the project, which is a unique identifier for the projectâ€™s group or organization.
- `com.example`: This is a common placeholder group ID and can be changed to reflect the actual organization or company name.

#### `<artifactId>`

Defines the artifact ID for the project, which is a unique identifier for the project itself within the group.
- `HelloServletProject`: This is the name of the project.

#### `<version>`

Specifies the version of the project.
- `0.0.1-SNAPSHOT`: This indicates the current version of the project. The `SNAPSHOT` suffix indicates that this is a development version and not a final release.

#### `<packaging>`

Specifies the packaging type of the project.
- `war`: This indicates that the project will be packaged as a Web Application Archive (WAR), which is used for web applications.

### Dependencies

The `<dependencies>` element contains a list of dependencies required by the project.

#### `<dependency>`

Defines a dependency required by the project.
-groupId: The group ID of the dependency.
  - `jakarta.servlet`: This is the group ID for the Jakarta Servlet API.
  
-artifactId: The artifact ID of the dependency.
  - `jakarta.servlet-api`: This is the artifact ID for the Jakarta Servlet API.
  
-version: The version of the dependency.
  - `6.0.0`: This is the version of the Jakarta Servlet API being used.

-scope: The scope of the dependency.
  - `provided`: This indicates that the dependency is provided by the runtime environment (e.g., the servlet container) and should not be included in the WAR file.

### Build Configuration

The `<build>` element contains information about the build configuration of the project.

#### `<finalName>`

Specifies the final name of the built artifact without the file extension.
- `HelloServletProject`: This will be the name of the WAR file generated by Maven (e.g., `HelloServletProject.war`).

### Summary

-Root Element: `<project>` is the root of the Maven POM file, defining the configuration for the Maven project.
- Model Version: `<modelVersion>` specifies the version of the POM model.
- Project Coordinates: `<groupId>`, `<artifactId>`, and `<version>` uniquely identify the project.
- Packaging: `<packaging>` specifies that the project will be packaged as a WAR file.
- Dependencies: `<dependencies>` lists the dependencies required by the project, with one dependency on the Jakarta Servlet API.
- Build Configuration: `<build>` specifies the final name of the built artifact.

This configuration ensures that the project can be built and managed using Maven, with the required dependencies and proper packaging for a web application.
-->